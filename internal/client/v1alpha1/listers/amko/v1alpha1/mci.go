/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/vmware/global-load-balancing-services-for-kubernetes/internal/apis/amko/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MCILister helps list MCIs.
// All objects returned here must be treated as read-only.
type MCILister interface {
	// List lists all MCIs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MCI, err error)
	// MCIs returns an object that can list and get MCIs.
	MCIs(namespace string) MCINamespaceLister
	MCIListerExpansion
}

// mCILister implements the MCILister interface.
type mCILister struct {
	indexer cache.Indexer
}

// NewMCILister returns a new MCILister.
func NewMCILister(indexer cache.Indexer) MCILister {
	return &mCILister{indexer: indexer}
}

// List lists all MCIs in the indexer.
func (s *mCILister) List(selector labels.Selector) (ret []*v1alpha1.MCI, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MCI))
	})
	return ret, err
}

// MCIs returns an object that can list and get MCIs.
func (s *mCILister) MCIs(namespace string) MCINamespaceLister {
	return mCINamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MCINamespaceLister helps list and get MCIs.
// All objects returned here must be treated as read-only.
type MCINamespaceLister interface {
	// List lists all MCIs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MCI, err error)
	// Get retrieves the MCI from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.MCI, error)
	MCINamespaceListerExpansion
}

// mCINamespaceLister implements the MCINamespaceLister
// interface.
type mCINamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MCIs in the indexer for a given namespace.
func (s mCINamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.MCI, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MCI))
	})
	return ret, err
}

// Get retrieves the MCI from the indexer for a given namespace and name.
func (s mCINamespaceLister) Get(name string) (*v1alpha1.MCI, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("mci"), name)
	}
	return obj.(*v1alpha1.MCI), nil
}
